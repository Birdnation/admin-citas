{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCitas","useState","mascota","dueno","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarInput","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","propTypes","PropTypes","func","isRequired","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevaCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.208c6cbe.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\r\nimport uuid from \"uuid/dist/v4\";\r\n\r\nconst Formulario = ({ crearCitas }) => {\r\n  //crear state de citas\r\n  const [cita, actualizarCita] = useState({\r\n    mascota: \"\",\r\n    dueno: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\",\r\n  });\r\n\r\n  //state para error\r\n  const [error, actualizarError] = useState(false);\r\n  //funcion que se ejecuta al cambiar un input\r\n  const actualizarInput = (e) => {\r\n    actualizarCita({\r\n      ...cita,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const { mascota, dueno, fecha, hora, sintomas } = cita;\r\n\r\n  const crearCita = (e) => {\r\n    e.preventDefault();\r\n    //Validar\r\n    if (\r\n      mascota.trim() === \"\" ||\r\n      dueno.trim() === \"\" ||\r\n      fecha.trim() === \"\" ||\r\n      hora.trim() === \"\" ||\r\n      sintomas.trim() === \"\"\r\n    ) {\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n\r\n    //modificar mensaje de error previo\r\n    actualizarCita(false);\r\n\r\n    //asignar ID\r\n    cita.id = uuid();\r\n\r\n    //crear Cita\r\n    crearCitas(cita);\r\n\r\n    //reiniciar Form\r\n    actualizarCita({\r\n      mascota: \"\",\r\n      dueno: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      sintomas: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      {error ? (\r\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n      ) : null}\r\n      <form onSubmit={crearCita}>\r\n        <label>Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={actualizarInput}\r\n          value={mascota}\r\n        />\r\n        <label>Nombre Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dueno\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño\"\r\n          onChange={actualizarInput}\r\n          value={dueno}\r\n        />\r\n        <label>Fecha alta</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarInput}\r\n          value={fecha}\r\n        />\r\n        <label>Hora alta</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarInput}\r\n          value={hora}\r\n        />\r\n        <label>Sintomas</label>\r\n        <textarea\r\n          name=\"sintomas\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Describa los sintomas\"\r\n          onChange={actualizarInput}\r\n          value={sintomas}\r\n        />\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({ cita, eliminarCita }) => {\r\n  return (\r\n    <div className=\"cita\">\r\n      <p>\r\n        Mascota: <span>{cita.mascota}</span>\r\n      </p>\r\n      <p>\r\n        Dueño: <span>{cita.dueno}</span>\r\n      </p>\r\n      <p>\r\n        Fecha: <span>{cita.fecha}</span>\r\n      </p>\r\n      <p>\r\n        Hora: <span>{cita.hora}</span>\r\n      </p>\r\n      <p>\r\n        Sintomas: <span>{cita.sintomas}</span>\r\n      </p>\r\n      <button\r\n        onClick={() => eliminarCita(cita.id)}\r\n        className=\"button eliminar u-full-width\"\r\n      >\r\n        Eliminar &times;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCita.propTypes = {\r\n  cita: PropTypes.object.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cita;\r\n","import { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nimport PropTypes from \"prop-types\";\n\nfunction App() {\n  //citas en el localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //use Effect para operaciones cuando el state cambia ejemplo cambia las citas y ejecuta el useEffect\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  //funcion para tomas las citas actuales y agregar una nueva\n  const crearCitas = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  //funcion para eliminar una cita del listado de citas\n  const eliminarCita = (id) => {\n    const nuevaCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevaCitas);\n  };\n\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCitas={crearCitas} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nFormulario.propTypes = {\n  crearCitas: PropTypes.func.isRequired,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}